Steps:

1. start.spring.io -> details and dependencies
2. unzipped
3. open in intellij
4. DB connection details -> next class
5. Start coding

-------------------------

spring.jpa.hibernate.ddl-auto=update || create || verify

update - everytime we run the system, only new changes are updated
         Note: even if no tables got created, it will create

create - everytime we run the system, it drop all the tables (means clears the data)
         and then recreates with current/latest changes

verify - verifies whether the DB has required tables and columns as per entities

--------------------------
spring boot / hibernate jpa framework writes the sql query
spring.jpa.properties.hibernate.show_sql=true -> whatever query we are executing
                                                 it shows the queries
                                                 more verbose


spring.datasource.driver-class-name=com.mysql.jdbc.Driver

		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.0</version>
		</dependency>



Getting below error

1.

Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.


2.
java.lang.RuntimeException: Driver com.mysql.jdbc.Driver claims to not accept jdbcUrl, jdbc::mysql://localhost:3306/bms_aug23


3.

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is java.lang.RuntimeException: Driver com.mysql.jdbc.Driver claims to not accept jdbcUrl, jdbc::mysql://localhost:3306/bms_aug23

-----------------------------------------------------------------------

For all dependent objects -> we use annotation called @Component
but if they also do something specific -> @Repository, @Service


-----------------------------------------------------------------------

For Controllers which support RestAPIs -> @RestController
For Simple controllers which does not support REST API's  -> @Controller

----------------------------------------------------------------------------

    /*

    Why AutoWired required?

    Before using @Autowired

    * Basically what Autowired does is that, usercontroller is dependent on userservice and
    * userService is dependent on userRepository. Imagine as a developer if you have to take care
    * for dependencies then what you do, first of all you will create the object of userRepository
    * then you will create the object of userService then you will inject the userRepository object
    * inside it then you will create userController object and then you will inject userService
    * object inside it. So you will manually create 3 seperate objects and 2 injections (repository
    * in service and service in controller). So developer/user need to do 5 tasks manually
    *

    After Using @Autowired

    * If we use @Autowired then we don't need to do anything manually, everything will be taken
    * care automatically, spring will take care of injection of objects. so when you say
    * userController @Autowired userService means userController is dependent on userService
    * object and spring will automatically takes care of creation of userService object and
    * injects userService object into the userController.
    *
    * So @Autowired is an annotation which takes care of dependency mgmt in spring and does
    * auto dependency mgmt for developers so that we as developer don't worry about all these
    * boiler plate codes & stuffs
    *
    *

    * */